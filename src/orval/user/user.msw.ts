/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Fake server API
 * API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  DeleteUser200,
  GetUser200,
  UpdateUser200
} from '../fakeServerAPI.schemas'

export const getGetUserResponseMock = (overrideResponse: Partial< GetUser200 > = {}): GetUser200 => ({user: faker.helpers.arrayElement([{email: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.word.sample(), undefined]), phone: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), ...overrideResponse})

export const getUpdateUserResponseMock = (overrideResponse: Partial< UpdateUser200 > = {}): UpdateUser200 => ({message: faker.helpers.arrayElement([faker.word.sample(), undefined]), user: faker.helpers.arrayElement([{email: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.word.sample(), undefined]), phone: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), ...overrideResponse})

export const getDeleteUserResponseMock = (overrideResponse: Partial< DeleteUser200 > = {}): DeleteUser200 => ({message: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})


export const getGetUserMockHandler = (overrideResponse?: GetUser200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUser200> | GetUser200)) => {
  return http.get('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateUserMockHandler = (overrideResponse?: UpdateUser200 | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UpdateUser200> | UpdateUser200)) => {
  return http.put('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteUserMockHandler = (overrideResponse?: DeleteUser200 | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteUser200> | DeleteUser200)) => {
  return http.delete('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUserMock = () => [
  getGetUserMockHandler(),
  getUpdateUserMockHandler(),
  getDeleteUserMockHandler()]
