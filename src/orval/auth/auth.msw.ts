/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Fake server API
 * API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  LoginUser200,
  RegistrationPost200
} from '../fakeServerAPI.schemas'

export const getRegistrationPostResponseMock = (overrideResponse: Partial<RegistrationPost200> = {}): RegistrationPost200 => ({ data: faker.helpers.arrayElement([{ clientId: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]) }, undefined]), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getLoginUserResponseMock = (overrideResponse: Partial<LoginUser200> = {}): LoginUser200 => ({ message: faker.helpers.arrayElement([faker.word.sample(), undefined]), token: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })


export const getRegistrationPostMockHandler = (overrideResponse?: RegistrationPost200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RegistrationPost200> | RegistrationPost200)) => {
  return http.post('*/register', async (info) => {
    await delay(1000);

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
      : getRegistrationPostResponseMock()),
      {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLoginUserMockHandler = (overrideResponse?: LoginUser200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LoginUser200> | LoginUser200)) => {
  return http.post('*/login', async (info) => {
    await delay(1000);

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
      : getLoginUserResponseMock()),
      {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAuthMock = () => [
  getRegistrationPostMockHandler(),
  getLoginUserMockHandler()]
